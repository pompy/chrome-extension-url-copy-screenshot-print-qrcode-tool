$(function() {	var tabid=null;	var tabtitle='';	//somdutt ganguly//tosomdutt@gmail.com  // Send a message to content.js to fetch all the top domains  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {	    var activeTab = tabs[0];	tabtitle=activeTab.title;	tabid=activeTab.id;  if(tabtitle=='New Tab') {	  document.getElementById('main').setAttribute("style", "display:none;");document.getElementById('notfound').setAttribute("style", "display:block;");  } else {		  document.getElementById('main').setAttribute("style", "display:block;");document.getElementById('notfound').setAttribute("style", "display:none;");    }    		    chrome.tabs.sendMessage(activeTab.id, {"message": "clicked_browser_action"});  });  // Add a listener to handle the response from content.js  chrome.runtime.onMessage.addListener(    function(request, sender, sendResponse) {		      if( request.message === "url_fetched" ) {		 var url=request.data;		 var hostname = (new URL(url)).hostname;	document.getElementById("urlnew").href=url;	document.getElementById("urltwitter").href="https://twitter.com/intent/tweet?text=I+m+sharing+this+url+" + url;	document.getElementById("urlfacebook").href="https://www.facebook.com/sharer/sharer.php?u=" + url;	document.getElementById("urllinkedin").href="https://www.linkedin.com/shareArticle?mini=true&url=" + url;	document.getElementById("urlgoogleplus").href="https://plus.google.com/share?url=" + url;	document.getElementById("whois").href="https://in.godaddy.com/whois/results.aspx?domain="+  hostname +"";	document.getElementById("urlwhatsapp").href="https://api.whatsapp.com/send?text=Sharing+"+  url +"";	document.getElementById("urlgmail").href="https://mail.google.com/mail/?view=cm&fs=1&to=someemail@gmail.com&su=sharing+link&body=Here+is+the+link+"+  url +"";			var qrcode = new QRCode("qrcode", {    text: url,    width: 228,    height: 228,    colorDark : "#000000",    colorLight : "#ffffff",    correctLevel : QRCode.CorrectLevel.H}); var link = document.getElementById('urlincognito');    link.addEventListener('click', function() {       chrome.windows.create({  url: url,  incognito: true});    });					 var bookmarkpage = document.getElementById('bookmarkpage');	     bookmarkpage.addEventListener('click', function() {		  chrome.bookmarks.create({                             'title': tabtitle,                             'url': url});							 chrome.tabs.sendMessage(tabid, { "message": "bookmark" });							 	 });	 	  var printpage = document.getElementById('printpage');	     printpage.addEventListener('click', function() {		    chrome.tabs.sendMessage(tabid, {"message": "print"});	 });	 	 	  var saveasmhtml = document.getElementById('saveasmhtml');     saveasmhtml.addEventListener('click', function() {		 		 				    chrome.pageCapture.saveAsMHTML({        tabId: tabid    }, function(blob) {        var url = URL.createObjectURL(blob);        // chrome.tabs.remove(tabid);         chrome.downloads.download({            url: url,            filename: 'downloaded.mhtml'        });    });		 });	 	 var capturescreen = document.getElementById('capturescreen');    capturescreen.addEventListener('click', function() {  chrome.tabs.captureVisibleTab(null, {format: "png"}, function(data) {var canvas = document.getElementById('screen');canvas.width = screen.width;    canvas.height = screen.height;var ctx = canvas.getContext("2d"); var img = new Image;img.src = data    ;  img.onload = function(){  ctx.drawImage(img,0,0); let downloadtemp = document.createElement('a');    downloadtemp.setAttribute('download', url + '_captured.png');    canvas.toBlob(function(blob) {      let url = URL.createObjectURL(blob);      downloadtemp.setAttribute('href', url);      downloadtemp.click();	  canvas.width = 250;    canvas.height = 200;	img.src = data    ; 	img.onload = function(){		// ctx.drawImage(img,0,0);ctx.drawImage(img, 0, 0, img.width,    img.height,                        0, 0, canvas.width, canvas.height);				   	  document.getElementById('container').setAttribute("style", "display:block;");	  document.getElementById('instructions').setAttribute("style", "display:block;");	  document.getElementById('screen').setAttribute("style", "display:block;");	  document.getElementById('canvasdata').setAttribute("style", "display:block;");	  	  	  window.scrollTo(0,document.body.scrollHeight);	};	    });	};			});    });		var canvas = document.getElementById('screen');canvas.addEventListener("mousemove",function(e){	  var pos = getPosition(this);    var x = e.pageX - pos.x;    var y = e.pageY - pos.y;    var coord = "x=" + x + ", y=" + y;    var c = this.getContext('2d');		//for zoom start	//var myImageData = c.getImageData(0, 0, 250, 200).data;	//form zoom end    var p = c.getImageData(x, y, 1, 1).data;  		    // If transparency on the image    if((p[0] == 0) && (p[1] == 0) && (p[2] == 0) && (p[3] == 0)){ 				coord += " (Transparent color detected, cannot be converted to HEX)";    }        var hex = "#" + ("000000" + rgbToHex(p[0], p[1], p[2])).slice(-6);        document.getElementById("status").innerHTML = hex;    document.getElementById("color").style.backgroundColor = hex;},false);canvas.addEventListener("click",function(e){	var pos = getPosition(this);    var x = e.pageX - pos.x;    var y = e.pageY - pos.y;    var coord = "x=" + x + ", y=" + y;    var c = this.getContext('2d');    var p = c.getImageData(x, y, 1, 1).data;  		    // If transparency on the image    if((p[0] == 0) && (p[1] == 0) && (p[2] == 0) && (p[3] == 0)){ 				coord += " (Transparent color detected, cannot be converted to HEX)";    }        var hex = "#" + ("000000" + rgbToHex(p[0], p[1], p[2])).slice(-6);        document.getElementById("clickstatus").innerHTML = hex;    document.getElementById("clickcolor").style.backgroundColor = hex;},false);			//more functions		function getPosition(obj) {    var curleft = 0, curtop = 0;    if (obj.offsetParent) {        do {            curleft += obj.offsetLeft;            curtop += obj.offsetTop;        } while (obj = obj.offsetParent);        return { x: curleft, y: curtop };    }    return undefined;}function rgbToHex(r, g, b) {    if (r > 255 || g > 255 || b > 255)        throw "Invalid color component";    return ((r << 16) | (g << 8) | b).toString(16);}			      }    }  );});